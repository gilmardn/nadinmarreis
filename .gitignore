#Meus arquivos ############

chave_nadin_marreis.ppk
.ajuda
bootstrap-5.3.3-examples
copia_seguranca



# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
### Django ###
*.log
*.pot
*.pyc
__pycache__/
local_settings.py
db.sqlite3
db.sqlite3-journal
media
# Se o seu processo de construção inclui a execução de collectstatic, então provavelmente não precisa ou deseja incluir staticfiles/
# no seu repositório Git. Atualize e descomente a linha seguinte adequadamente.
# <nome-do-projecto-django>/staticfiles/

### Django.Python Stack ###
# Byte-compiled / optimized / DLL files
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
# Normalmente estes ficheiros são escritos por um script python a partir de um modelo
# antes do PyInstaller criar o exe, para injetar data/outras informações no mesmo.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo

# Django stuff:

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
# Para uma biblioteca ou pacote, pode querer ignorar estes ficheiros, pois o código é
# destinado a ser executado em múltiplos ambientes; caso contrário, faça o check-in:
# . versão-python

# pipenv
# De acordo com pypa/pipenv#598, é recomendado incluir o Pipfile.lock no controlo de versões.
# No entanto, em caso de colaboração, se existirem dependências específicas da plataforma ou dependências
# não tendo suporte multiplataforma, o pipenv pode instalar dependências que não funcionam, ou não
# instale todas as dependências necessárias.
#ArquivoPip.bloqueio

# poetry
# Semelhante ao Pipfile.lock, é geralmente recomendado incluir o poetry.lock no controlo de versão.
# Isto é especialmente recomendado para pacotes binários para garantir a reprodutibilidade e é mais
# comummente ignorado para bibliotecas.
# https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poesia.lock

# pdm
# Semelhante ao Pipfile.lock, é geralmente recomendado incluir o pdm.lock no controlo de versão.
#pdm.bloqueio
# pdm armazena as configurações de todo o projeto em .pdm.toml, mas é recomendado não o incluir
# no controlo de versão.
# https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py


# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/


### Python Patch ###
# Poetry local configuration file - https://python-poetry.org/docs/configuration/#local-configuration
poetry.toml

# ruff
.ruff_cache/

# LSP config files
pyrightconfig.json

# End of https://www.toptal.com/developers/gitignore/api/python,django